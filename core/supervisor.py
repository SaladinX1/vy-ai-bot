# core/supervisor.py

from core.orchestrator import BusinessOrchestrator
from core.db_manager import DBManager
from utils.logger import append_log

class SupervisorAgent:
    """
    Supervise les projets stock√©s en base de donn√©es et relance ceux qui sont bloqu√©s, vides ou incomplets.
    """

    def __init__(self):
        pass

    def run_check_cycle(self):
        """
        Parcourt tous les projets et relance ceux qui ont √©chou√© ou qui sont sans √©tat.
        """
        try:
            projects = DBManager.list_projects()
        except Exception as e:
            append_log(f"‚ùå Erreur lors du listing des projets : {e}")
            return

        for project in projects:
            try:
                state = DBManager.get_project_state(project)

                # Aucun √©tat trouv√© ‚Üí relance totale
                if not state:
                    append_log(f"‚ö†Ô∏è Projet '{project}' sans √©tat ‚Äî relance compl√®te.")
                    orchestrator = BusinessOrchestrator(goals=[project])
                    orchestrator.launch_all()
                    continue

                # Statut non succ√®s ‚Üí tentative de relance
                if state.get("status") != "success":
                    append_log(f"üîÅ Projet '{project}' en √©chec ou incomplet ‚Äî tentative de relance.")
                    orchestrator = BusinessOrchestrator(goals=[project])
                    orchestrator.launch_all()

            except Exception as err:
                append_log(f"‚ùå Erreur lors du traitement du projet '{project}' : {err}")



from core.db_manager import DBManager
from orchestrator import BusinessOrchestrator
from utils.logger import append_log

class SupervisorAgent:
    def __init__(self):
        pass

    def run_check_cycle(self):
        projects = DBManager.list_projects()

        for proj in projects:
            state = DBManager.get_project_state(proj)

            if not state:
                append_log(f"‚ö†Ô∏è Projet {proj} sans √©tat ‚Äî relance plan compl√®te.")
                orchestrator = BusinessOrchestrator(goals=[proj])
                orchestrator.launch_all()
            elif state.get("status") != "success":
                append_log(f"üîÅ Projet {proj} incomplet ‚Äî tentative de relance.")