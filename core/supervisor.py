# core/supervisor.py

from core.db_manager import DBManager
from core.orchestrator import BusinessOrchestrator
from utils.logger import append_log

class SupervisorAgent:
    """
    Surveille tous les projets enregistr√©s et relance automatiquement
    ceux qui sont sans √©tat ou dont l'ex√©cution a √©chou√©.
    """

    def __init__(self):
        pass

    def run_check_cycle(self):
        """
        V√©rifie tous les projets existants et tente de relancer ceux :
        - sans √©tat (√©tat vide ou absent)
        - avec un statut diff√©rent de 'success'
        """
        try:
            projects = DBManager.list_projects()
        except Exception as e:
            append_log(f"‚ùå Erreur lors de la r√©cup√©ration des projets : {e}")
            return

        for project_id in projects:
            try:
                state = DBManager.get_state(project_id)

                if not state:
                    append_log(f"‚ö†Ô∏è Projet '{project_id}' sans √©tat ‚Äî relance compl√®te.")
                    orchestrator = BusinessOrchestrator(goals=[project_id])
                    orchestrator.launch_all()
                    continue

                if state.get("status") != "success":
                    append_log(f"üîÅ Projet '{project_id}' en √©chec ou incomplet ‚Äî tentative de relance.")
                    orchestrator = BusinessOrchestrator(goals=[project_id])
                    orchestrator.launch_all()

            except Exception as err:
                append_log(f"‚ùå Erreur durant le traitement du projet '{project_id}' : {err}")
